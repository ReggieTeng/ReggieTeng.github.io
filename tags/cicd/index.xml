<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cicd on Hello</title><link>https://reggieteng.github.io/tags/cicd/</link><description>Recent content in cicd on Hello</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Tue, 31 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://reggieteng.github.io/tags/cicd/index.xml" rel="self" type="application/rss+xml"/><item><title>drone的yml文件详解</title><link>https://reggieteng.github.io/posts/2021/08/drone%E7%9A%84yml%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate><guid>https://reggieteng.github.io/posts/2021/08/drone%E7%9A%84yml%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid><description>cicd简介 CI全称为Continuous Integration，意为持续集成，是在源代码变更后自动检测、拉取、构建和进行自动化测试的过程，属于开发人员的自动化流程。该解决方案可以解决在一次开发中有太多应用分支，从而导致相互冲突的问题。其基本思路是，自动化监测代码仓库的变化并拉取最新代码、编译构建和自动化测试。CI的触发方式可分为以下三种：
轮询：按一定的时间间隔反复询问代码仓库是否发生了变更，若发生了变更则开启CI流程 定时：定期从代码仓库拉去最新代码并进行构建与测试，不必关心是否有变更发生 推送：当代码仓库发生变更时，通过推送的方式(如webhook)通知CI进行任务，这需要CI环境被代码仓库访问到，因此需要一个外网可达地址 CD指的是持续交付(Continuous Delivery)或持续部署(Continuous Deployment)。持续交付通常是指开发人员对应用的更改会自动进行错误测试并上传到存储库（如 GitHub 或容器注册表），然后由运维团队将其部署到实时生产环境中。持续部署指的是自动将开发人员的更改从存储库发布到生产环境，它以持续交付为基础，实现了管道后续阶段的自动化。 CI/CD 既可能仅指持续集成和持续交付构成的关联环节，也可以指持续集成、持续交付和持续部署这三项构成的关联环节。
Drone 基于Docker的 CI/CD 工具Drone所有编译、测试的流程都在Docker容器中进行。 开发者只需在项目中包含.drone.yml文件，将代码推送到git仓库，Drone就能够自动化的进行编译、测试、发布。 示例yml文件如下：
--- kind: pipeline type: docker name: default # 指定代码空间，git代码会被clone到指定的path workspace: path: /drone/src # 指定编译平台 platform: os: linux arch: amd64 clone: disable: true volumes: - name: godeps path: /go/pkg steps: - name: 测试环境代码clone # 失败退出 failure: always image: golang:1.15 commands: - git init - git fetch http://xxx.git dev - git checkout FETCH_HEAD - git rev-parse HEAD when: branch: - dev event: - push - name: 线上环境代码clone failure: always image: golang:1.</description></item></channel></rss>