<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>flag on Hello</title><link>https://reggieteng.github.io/tags/flag/</link><description>Recent content in flag on Hello</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Tue, 06 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://reggieteng.github.io/tags/flag/index.xml" rel="self" type="application/rss+xml"/><item><title>golang标准包--flag</title><link>https://reggieteng.github.io/posts/2021/04/golang%E6%A0%87%E5%87%86%E5%8C%85-flag/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://reggieteng.github.io/posts/2021/04/golang%E6%A0%87%E5%87%86%E5%8C%85-flag/</guid><description>简介 flag包是golang标准包之一.它实现了命令行参数的解析.flag包使得开发命令行工具更为简单.
基本流程 使用flag包基本流程分为三步
1 定义需要解析的命令行参数 2 调用flag.Parse() 3 根据后续的逻辑处理解析后的flag参数 1.定义命令行参数 // string的注册,其中&amp;#34;l&amp;#34;为调用时的name &amp;#34;warn&amp;#34;为默认值 &amp;#34;log level&amp;#34;可理解为说明 FlagLogLevel = flag.String(&amp;#34;l&amp;#34;, &amp;#34;warn&amp;#34;, &amp;#34;log level&amp;#34;) // int的注册 FlagThreads = flag.Int(&amp;#34;t&amp;#34;, 3, &amp;#34;threads used when starting&amp;#34;) // bool的注册 FlagVersion = flag.Bool(&amp;#34;v&amp;#34;, false, &amp;#34;show version&amp;#34;) 可通过如下面命令调用./main -l=&amp;quot;debug&amp;quot; -t=1 -v=true
命令行传参数的格式任选其一 -age=x (一个 - 符号，使用等号) 推荐 -age x (一个 - 符号，使用空格) &amp;ndash;age=x (两个 - 符号，使用等号) &amp;ndash;age x (两个 - 符号，使用空格)
2.调用flag.Parse() 3.处理其他逻辑 func main() { flag.</description></item></channel></rss>