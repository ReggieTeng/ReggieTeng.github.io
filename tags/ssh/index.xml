<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ssh on Hello</title><link>https://reggieteng.github.io/tags/ssh/</link><description>Recent content in ssh on Hello</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sun, 11 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://reggieteng.github.io/tags/ssh/index.xml" rel="self" type="application/rss+xml"/><item><title>golang/x包--ssh</title><link>https://reggieteng.github.io/posts/2021/04/golang/x%E5%8C%85-ssh/</link><pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate><guid>https://reggieteng.github.io/posts/2021/04/golang/x%E5%8C%85-ssh/</guid><description>简介 在相对较小的项目中我们的服务器很少，此时我们会直接使用ssh登录服务器对服务器进行管理。当服务器增多/服务器更换后，对服务器的管理就会变得很麻烦和低效。此时我们必须要实现服务器管理的自动化。
远程命令执行 golang.org/x/crypto/ssh包就是golang中对ssh协议的实现。 我们分四步进行:
1 创建ssh登陆配置(ssh.ClientConfig) 2 dial 获取ssh client 3 创建ssh-session 4 执行远程命令 1.创建ssh.ClientConfig 源码中ssh.ClientConfig 结构体如下
type ClientConfig struct { // Config contains configuration that is shared between clients and // servers. Config // User contains the username to authenticate as. User string // Auth contains possible authentication methods to use with the // server. Only the first instance of a particular RFC 4252 method will // be used during authentication.</description></item></channel></rss>