<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on Hello</title><link>https://reggieteng.github.io/tags/kubernetes/</link><description>Recent content in kubernetes on Hello</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 11 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://reggieteng.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>etcd的配置文件</title><link>https://reggieteng.github.io/posts/2021/10/etcd%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate><guid>https://reggieteng.github.io/posts/2021/10/etcd%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>etcd 是一种高度一致的分布式键值存储，它提供了一种可靠的方式来存储需要由分布式系统或机器集群访问的数据. 它有以下基本的功能
通过http请求读取和写入值 将数据存储在分层组织的目录中，就像在标准文件系统中一样 观察特定键或目录的变化并对值的变化做出反应 今天我们就来了解一下etcd配置文件
# This is the configuration file for the etcd server.# 节点名称 这个值和--initial-cluster flag (e.g., default=http://localhost:2380)中的key值一一对应，如果在集群环境中，name必须是唯一的，建议用主机名称或者机器IDname:&amp;#39;default&amp;#39;# 数据的存储路径data-dir:# 存放预写式日志,最大的作用是记录了整个数据变化的全部历程。未设置，共用--data-dir文件所在目录。可以配置路径为专用磁盘，有助于避免日志记录和其他io操作之间的io竞争wal-dir:# 数据快照触发数量，etcd处理指定的次数的事务提交后，生成数据快照snapshot-count:10000# 客户端连接后的心跳间隔（毫秒）heartbeat-interval:100# 集群选举的超时时间election-timeout:1000# Raise alarms when backend size exceeds the given quota. 0 means use the# default quota.quota-backend-bytes:0# 本节点与其他节点进行数据交换(选举，数据同步)的监听地址，地址写法是 scheme://IP:port，可以多个并用逗号隔开，如果配置是http://0.0.0.0:2380,将不限制node访问地址listen-peer-urls:http://localhost:2380# 监听地址，地址写法是 scheme://IP:port，可以多个并用逗号隔开，如果配置是http://0.0.0.0:2379,将不限制node访问地址listen-client-urls:http://localhost:2379# 要保留的快照文件的最大数量，0是无限制。Windows用户的默认值是无限制的，建议设置5以下的值。max-snapshots:5# 要保留的wal文件的最大数量，0是无限制。Windows用户的默认值是无限制的，建议设置5以下的值。max-wals:5# 逗号分隔的 CORS（跨源资源共享）来源白名单cors:# 通知其他节点与本节点进行数据交换（选举，同步）的地址，URL可以使用domain地址。与--listener-peer-urls不同在于listener-peer-urls用于请求客户端的接入控制，initial-advertise-peer-urls是告知其他集群节点访问哪个URL，一般来说，initial-advertise-peer-urlsl将是istener-peer-urls的子集initial-advertise-peer-urls:http://localhost:2380# 用于通知其他ETCD节点，客户端接入本节点的监听地址，一般来说advertise-client-urls是listen-client-urls子集，这些URL可以包含域名advertise-client-urls:http://localhost:2379# 集群发现服务地址discovery:# 发现服务失败时的预期行为（“exit”或“proxy”）。“proxy”仅支持v2 APIdiscovery-fallback:&amp;#39;proxy&amp;#39;# 用于流量到发现服务的HTTP代理discovery-proxy:# 用于引导集群的DNS sry域discovery-srv:# 用于引导初始集群配置，集群中所有节点的信息。initial-cluster:# 集群唯一标识，相同标识的节点将视为在一个集群内initial-cluster-token:&amp;#39;etcd-cluster&amp;#39;# 初始集群状态，设置new为初始静态或DNS引导期间出现的所有成员。如果将此选项设置为existing，则etcd将尝试加入现有群集。initial-cluster-state:&amp;#39;new&amp;#39;# 拒绝可能导致仲裁丢失的重新配置请求strict-reconfig-check:false# 接受etcd V2客户端请求enable-v2:true# 通过HTTP服务器启用运行时分析数据。地址位于客户端URL +“/ debug / pprof /”enable-pprof:true# 代理模式设置，（&amp;#34;off&amp;#34;, &amp;#34;readonly&amp;#34; or &amp;#34;on&amp;#34;）proxy:&amp;#39;off&amp;#39;# 在重新考虑代理请求之前，endpoints 将处于失败状态的时间（以毫秒为单位）proxy-failure-wait:5000# endpoints 刷新间隔的时间（以毫秒为单位）proxy-refresh-interval:30000# 拨号超时的时间（以毫秒为单位）或0表示禁用超时proxy-dial-timeout:1000# 写入超时的时间（以毫秒为单位）或0以禁用超时proxy-write-timeout:5000# 读取超时的时间（以毫秒为单位）或0以禁用超时。如果使用watch，不要改变这个值，因为使用长轮询请求proxy-read-timeout:0client-transport-security:# 客户端服务器TLS证书文件的路径。cert-file:# 客户端服务器TLS密钥文件的路径key-file:# 启用客户端证书验证。client-cert-auth:false# 客户端服务器的路径TLS可信CA证书文件trusted-ca-file:# 客户端TLS使用生成的证书auto-tls:falsepeer-transport-security:# Path to the peer server TLS cert file.</description></item></channel></rss>