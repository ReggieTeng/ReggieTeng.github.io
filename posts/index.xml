<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Hello</title><link>https://reggieteng.github.io/posts/</link><description>Recent content in Posts on Hello</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Tue, 06 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://reggieteng.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>golang标准包--flag</title><link>https://reggieteng.github.io/posts/2021/04/golang%E6%A0%87%E5%87%86%E5%8C%85-flag/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://reggieteng.github.io/posts/2021/04/golang%E6%A0%87%E5%87%86%E5%8C%85-flag/</guid><description>简介 flag包是golang标准包之一.它实现了命令行参数的解析.flag包使得开发命令行工具更为简单.
基本流程 使用flag包基本流程分为三步
1 定义需要解析的命令行参数 2 调用flag.Parse() 3 根据后续的逻辑处理解析后的flag参数 1.定义命令行参数 // string的注册,其中&amp;#34;l&amp;#34;为调用时的name &amp;#34;warn&amp;#34;为默认值 &amp;#34;log level&amp;#34;可理解为说明 FlagLogLevel = flag.String(&amp;#34;l&amp;#34;, &amp;#34;warn&amp;#34;, &amp;#34;log level&amp;#34;) // int的注册 FlagThreads = flag.Int(&amp;#34;t&amp;#34;, 3, &amp;#34;threads used when starting&amp;#34;) // bool的注册 FlagVersion = flag.Bool(&amp;#34;v&amp;#34;, false, &amp;#34;show version&amp;#34;) 可通过如下面命令调用./main -l=&amp;quot;debug&amp;quot; -t=1 -v=true
命令行传参数的格式任选其一 -age=x (一个 - 符号，使用等号) 推荐 -age x (一个 - 符号，使用空格) &amp;ndash;age=x (两个 - 符号，使用等号) &amp;ndash;age x (两个 - 符号，使用空格)
2.调用flag.Parse() 3.处理其他逻辑 func main() { flag.</description></item><item><title>gin分模块注册router</title><link>https://reggieteng.github.io/posts/2021/03/gin%E5%88%86%E6%A8%A1%E5%9D%97%E6%B3%A8%E5%86%8Crouter/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>https://reggieteng.github.io/posts/2021/03/gin%E5%88%86%E6%A8%A1%E5%9D%97%E6%B3%A8%E5%86%8Crouter/</guid><description>最基本的路由注册
下面是最基本的router注册方式,只适用于小型项目或学习demo
package main import ( &amp;#34;net/http&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func helloHandler(c *gin.Context) { c.JSON(http.StatusOK, gin.JSON{ &amp;#34;message&amp;#34;: &amp;#34;Hello world!&amp;#34;, }) } func main() { r := gin.Default() r.GET(&amp;#34;/hello&amp;#34;, helloHandler) if err := r.Run(); err != nil { fmt.Println(&amp;#34;launch service failed, err:%v\n&amp;#34;, err) } } router注册拆出
当项目的规模逐渐变大时,在main,go中定义router非常不合适.此时就可以考虑将router部分代码单独写出。此时文件结构为
. ├── ... --- 其他文件 ├── main.go --- 项目入口 └── router.go --- router文件 其中router.go代码如下
package main import ( &amp;#34;net/http&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func helloHandler(c *gin.</description></item><item><title>Debian添加work用户</title><link>https://reggieteng.github.io/posts/2021/03/debian%E6%B7%BB%E5%8A%A0work%E7%94%A8%E6%88%B7/</link><pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate><guid>https://reggieteng.github.io/posts/2021/03/debian%E6%B7%BB%E5%8A%A0work%E7%94%A8%E6%88%B7/</guid><description>一般在开发中很少使用root用户，可以创建work用户进行软件安装等操作。
以root用户登陆服务器后，添加work用户 useradd -d /home/work -s /bin/bash -m work
设置work用户的密码 passwd work
将work用户添加至sudo组中 adduser work sudo
注意:以上操作均在root用户下操作，若非root用户，则需要加sudo
关于useradd命令的参数意义如下，供参考：
-c&amp;lt;备注&amp;gt;：加上备注文字。备注文字会保存在passwd的备注栏位中；
-d&amp;lt;登入目录&amp;gt;：指定用户登入时的启始目录； -D：变更预设值；
-e&amp;lt;有效期限&amp;gt;：指定帐号的有效期限；
-f&amp;lt;缓冲天数&amp;gt;：指定在密码过期后多少天即关闭该帐号；
-g&amp;lt;群组&amp;gt;：指定用户所属的群组；
-G&amp;lt;群组&amp;gt;：指定用户所属的附加群组；
-m：自动建立用户的登入目录；
-M：不要自动建立用户的登入目录；
-n：取消建立以用户名称为名的群组；
-r：建立系统帐号；
-s：指定用户登入后所使用的shell；
-u：指定用户id。</description></item></channel></rss>